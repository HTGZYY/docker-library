name: Generally auto test apps

on:
  push:
    branches: [main]
    paths:
      - "apps/*/.env"
      - "apps/*/dockercompose.yml"

jobs:
  test:
    name: Test docker compose
    runs-on: ubuntu-latest
    env:
      TAGS: latest
    steps:
      - uses: actions/checkout@v2
        name: Check out code

      - name: get appnames and test 
        run: |
          changefile=$(curl \
                         -H "Accept: application/vnd.github+json" \
                         -H "Authorization: Bearer ${{github.token}}" \
                         https://api.github.com/repos/Websoft9/docker-library/compare/${{github.event.before}}...${{github.event.after}} | jq '.files[].filename' | sed 's/\"//g')
          declare -a appnames
          for name in ${changefile};do
              echo ${name}
              app=$(echo ${name} | cut -d "/" -f 2)
              file=$(echo ${name} | cut -d "/" -f 3)
              if [[ ${file} == ".env" ]] || [[ ${file} == "dockercompose.yml" ]];then
                  if [[ ! " ${appnames[@]} " =~ " ${app} " ]]; then
                      appnames+=(${app})
                  fi
              else
                  echo "affect nothing";
              fi
          done
          
          docker network create websoft9
          ls -la
          for appname in ${appnames[@]}; do
            echo "############### ${appname} start #################################"
            docker-compose -f apps/${appname}/docker-compose.yml up -d
            sleep 30  # Wait for the service to start
            docker ps
            env_file="apps/${appname}/.env"
            if [ -f "$env_file" ]; then
                port=$(grep W9_HTTP_PORT_SET $env_file | cut -d '=' -f2)
                if [ -z "$port" ]; then
                    echo "It is not web app";
                    exit 1
                else
                    echo "It is a web app"
                fi
            else
                echo "$env_file does not exist";
                exit 1
            fi
            url="http://localhost:$port"
            retry=0
            while [ $retry -lt 3 ]; do
              response=$(curl --write-out '%{http_code}' --silent --output /dev/null "$url")
            
              if [ "$response" -eq 200 ] ; then
                echo "${appname} is up and running."
                exit 0
              else
                echo "Waiting for ${appname} to start..."
                sleep 10
                ((retry++))
              fi
            done
            output=$(curl -L --silent localhost:9001)
            if echo "$output" | grep -q "Failed"; then
              echo "${appname}: can not access" >> /tmp/output
            else
              echo "${appname}: can access" >> /tmp/output
            fi
            docker-compose -f apps/${appname}/docker-compose.yml down -v
          done
          cat /tmp/output
