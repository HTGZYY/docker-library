# docs: https://docs.tooljet.com/docs/setup/docker/
# image: https://hub.docker.com/r/tooljet/tooljet-ce

version: '3.8'

services:
  tooljet:
    tty: true
    stdin_open: true
    container_name: ${W9_ID}
    image: ${W9_REPO}:${W9_VERSION}
    restart: unless-stopped
    env_file: .env
    ports:
      - ${W9_HTTP_PORT_SET}:80
    depends_on:
      - postgres
      - redis
    environment:
      SERVE_CLIENT: "true"
      PORT: "80"
    command: npm run start:prod

  postgres:
    container_name: ${W9_ID}-postgresql
    image: postgres:13
    restart: unless-stopped
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS}

  postgrest:
    container_name: ${W9_ID}-postgrest
    image: postgrest/postgrest:v10.1.1.20221215
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - PGRST_SERVER_PORT=80
      - PGRST_DB_URI=postgres://postgres:$W9_RCODE@$W9_ID-postgresql/tooljet_db
      - PGRST_JWT_SECRET=52bbe1c671a9c62d89e594dfd91597988542c27afaefa84a73$W9_RCODE

  redis:
    container_name: ${W9_ID}-redis
    image: redis:6.2
    restart: unless-stopped
    volumes:
      - redis_data:/var/lib/redis/data
    environment:
      - MASTER=${W9_ID}-redis
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}

  database-backup-service:
    image: postgres:alpine
    container_name: ${W9_ID}-backup
    #env_file: .env
    volumes:
      - backup:/backup
    depends_on:
      - postgres
    command: >
      sh -c 'if [ "$DATABASE_BACKUP" = "true" ]; then
        until PGPASSWORD=$PG_PASS pg_isready -h ${W9_ID}-postgresql -p 5432; do
          echo "Waiting for PostgreSQL to become available..." && sleep 1;
        done;
        PGPASSWORD=$PG_PASS pg_dump --host=${W9_ID}-postgresql --port=5432 --username=$PG_USER --dbname=$PG_DB -f "/backup/dump_$(date +'%Y%m%d%H%M%S').sql" &&
        find /backup -type f -mtime +30 -delete &&
        echo "Dump taken successfully." &&
        exit 0;
      else
        echo "Skipping backup." &&
        exit 1;
      fi'      

volumes:
  redis_data:
  postgres:
  backup:
    
networks:
  default:
    name: ${W9_NETWORK}
    external: true
