# docs: https://github.com/apitable/apitable/blob/develop/README.md#installation
# Official docs only provide install.sh, and we have get the From install.sh, 
# it is easy to see that it only downloads compose and starts it
# compose: https://github.com/apitable/apitable/blob/develop/docker-compose.yaml

# modifications: Named volumes, restart policy, container_name

version: "3.9"

services:
  gateway:
    image: ${IMAGE_REGISTRY}/${IMAGE_GATEWAY}
    container_name: $W9_ID
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: unless-stopped
    ports:
      - ${W9_HTTP_PORT_SET}:${W9_HTTP_PORT}
    environment:
      - TZ=${TIMEZONE}
    depends_on:
      web-server:
        condition: service_started
      imageproxy-server:
        condition: service_started
      backend-server:
        condition: service_healthy
      room-server:
        condition: service_started
      init-appdata:
        condition: service_completed_successfully

  web-server:
    container_name: $W9_ID-webserver
    image: ${IMAGE_REGISTRY}/${IMAGE_WEB_SERVER}
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: unless-stopped
    expose:
      - "8080"
    env_file:
      - .env

  imageproxy-server:
    container_name: $W9_ID-imageproxy
    image: ${IMAGE_REGISTRY}/${IMAGE_IMAGEPROXY_SERVER}
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: unless-stopped
    expose:
      - "8080"
    environment:
      - TZ=${TIMEZONE}
      - BASEURL=${AWS_ENDPOINT}

  backend-server:
    container_name: $W9_ID-backend
    image: ${IMAGE_REGISTRY}/${IMAGE_BACKEND_SERVER}
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: unless-stopped
    env_file:
      - .env
    expose:
      - "8081"
    environment:
      - TZ=${TIMEZONE}
      - DEFAULT_TIME_ZONE=${TIMEZONE}
    depends_on:
      init-db:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl -sS 'http://localhost:8081' || exit 1"]
      interval: 5s
      timeout: 5s
      start_period: 30s
      retries: 60

  room-server:
    image: ${IMAGE_REGISTRY}/${IMAGE_ROOM_SERVER}
    container_name: $W9_ID-room
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: unless-stopped
    expose:
      - "3333"
      - "3334"
      - "3001"
      - "3002"
      - "3006"
      - "3005"
      - "3007"
    env_file:
      - .env
    environment:
      - TZ=${TIMEZONE}
      - NODE_ENV=${ENV}
      - NODE_OPTIONS=--max-old-space-size=2048 --max-http-header-size=80000
      - API_MAX_MODIFY_RECORD_COUNTS=${API_MAX_MODIFY_RECORD_COUNTS:-30}
      - INSTANCE_MAX_MEMORY=4096M
      - ENABLE_SOCKET=true
    depends_on:
      mysql:
        condition: service_healthy

  databus-server:
    image: ${IMAGE_REGISTRY}/${IMAGE_DATABUS_SERVER}
    container_name: $W9_ID-databus
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: always
    expose:
      - "8625"
    env_file:
      - "${ENV_FILE:-.env}"
    environment:
      - TZ=${TIMEZONE}
    depends_on:
      mysql:
        condition: service_healthy

  minio:
    image: ${IMAGE_MINIO}
    container_name: $W9_ID-minio
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: unless-stopped
    command: server --console-address ":9001" /data
    expose:
      - "9000"
      - "9001"
    volumes:
      - minio_data:/data
      - minio_config:/root/.minio
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - TZ=${TIMEZONE}
    healthcheck:
      test: ["CMD-SHELL", "curl -sS 'http://localhost:9000' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30

  redis:
    image: ${IMAGE_REDIS}
    container_name: $W9_ID-redis
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: unless-stopped
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--requirepass",
        "${REDIS_PASSWORD}",
      ]
    expose:
      - "6379"
    volumes:
      - redis:/data
    environment:
      - TZ=${TIMEZONE}

  mysql:
    image: ${IMAGE_MYSQL}
    container_name: $W9_ID-mysql
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: unless-stopped
    volumes:
      - mysql:/var/lib/mysql
    expose:
      - "3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - TZ=${TIMEZONE}
    # need to use this format: websoft9
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_general_ci
      - --sql_mode=IGNORE_SPACE,NO_ENGINE_SUBSTITUTION
      - --lower_case_table_names=2
    healthcheck:
      # need to use this test case: websoft9
      test: ["CMD", "mysqladmin", "ping", "-u${MYSQL_USERNAME}", "-p${MYSQL_PASSWORD}"]
      interval: 5s
      timeout: 5s
      start_period: 30s
      retries: 60

  rabbitmq:
    image: ${IMAGE_RABBITMQ}
    container_name: $W9_ID-rabbitmq
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: unless-stopped
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    expose:
      - "5671"
      - "5672"
      - "15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}

  # init data
  init-db:
    image: ${IMAGE_REGISTRY}/${IMAGE_INIT_DB}
    container_name: $W9_ID-initdb
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    environment:
      - TZ=${TIMEZONE}
      - DB_HOST=${MYSQL_HOST}
      - DB_PORT=${MYSQL_PORT}
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USERNAME=${MYSQL_USERNAME}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DATABASE_TABLE_PREFIX=${DATABASE_TABLE_PREFIX}
      - ACTION=update
    depends_on:
      mysql:
        condition: service_healthy

  # init-appdata
  init-appdata:
    image: ${IMAGE_REGISTRY}/${IMAGE_INIT_APPDATA}
    container_name: $W9_ID-initappdata
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    env_file:
      - .env
    depends_on:
      mysql:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully

networks:
  default:
    name: ${W9_NETWORK}
    external: true

volumes:
  redis:
  mysql:
  minio_data: 
  minio_config: 
  rabbitmq: